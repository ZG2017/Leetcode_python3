# my first solution: (0.102)
class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        sss = list(s)
        counter = {}
        tmp = {}
        for i in range(len(sss)):
            tmp_counter = 1
            tmp[sss[i]] = 1
            for j in range(1,len(sss)-i):
                if sss[i+j] in tmp:
                    break
                else:
                    tmp_counter += 1
                    tmp[sss[i+j]] = 1
            counter[tmp_counter] = 1
            tmp = {}
        if len(counter) == 0:
            return 0
        else:
            return max(counter)


# update solution: 0.992
class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        current_start = 0
        longend = -1
        longstart = 0
        counter = {}
        for index, char in enumerate(s):
            if char in counter and current_start <= counter[char]:
                current_start = counter[char] + 1
            counter[char] = index
            if index-current_start>longend-longstart:
                longend = index
                longstart = current_start
            print(current_start)
        print(longend)
        print(longstart)
        print(counter)
        return longend - longstart + 1
