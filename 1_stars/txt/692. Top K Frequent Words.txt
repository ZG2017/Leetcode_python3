hash map
class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        from collections import Counter
        c_words = Counter(words)
        return [i[0] for i in sorted(c_words.items(), key = lambda x:(-x[1], x[0]))[:k]]


follow up (required time complexity:O(Nlog(K)) & space complexity O(n))
heap sort

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        from collections import Counter
        import heapq
        c_words = Counter(words)
        c_words = [(-i[1], i[0]) for i in c_words.items()]
        heapq.heapify(c_words)
        return [i[1] for i in heapq.nsmallest(k, c_words)]