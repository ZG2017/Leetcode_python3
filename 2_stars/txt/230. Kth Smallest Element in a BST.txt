mine:(recursive)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        if not root:
            return 0
        self.counter = 0
        self.flag = False
        self.res = 0
        def helper(root):
            if not root:
                return 
            helper(root.left)
            if self.flag:
                return
            else:
                self.counter += 1
            if self.counter == k:
                self.res = root.val
                self.flag = True
                return
            helper(root.right)
        helper(root)
        return self.res




mine_updated:(stack)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        if not root:
            return 0
        stack = []
        curr = root
        counter = 1
        while curr:
            stack.append(curr)
            curr = curr.left
        
        while stack and counter <= k:
            tmp = stack.pop()
            counter += 1
            right = tmp.right
            while right:
                stack.append(right)
                right = right.left
        return tmp.val