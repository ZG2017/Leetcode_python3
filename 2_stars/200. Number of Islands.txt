mine:(BFS)
class Solution:
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        saver = []
        counter = 0
        stack = []
        visited = [[False for _ in range(len(grid[0]))]for _ in range(len(grid))]
        def helper():
            i,j = stack.pop(0)
            visited[i][j] = True
            if i-1>=0 and i-1 < len(grid) and j>=0 and j < len(grid[0]) and grid[i-1][j] == "1":
                stack.append((i-1,j))
            if i+1>=0 and i+1 < len(grid) and j>=0 and j < len(grid[0]) and grid[i+1][j] == "1":
                stack.append((i+1,j))
            if i>=0 and i < len(grid) and j-1>=0 and j-1 < len(grid[0]) and grid[i][j-1] == "1":
                stack.append((i,j-1))
            if i>=0 and i < len(grid) and j+1>=0 and j+1 < len(grid[0]) and grid[i][j+1] == "1":
                stack.append((i,j+1))
            while stack and visited[stack[0][0]][stack[0][1]]:
                stack.pop(0)
            if stack:
                helper()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == "0" or visited[i][j]:
                    continue
                else:
                    counter += 1
                    stack.append((i,j))
                    helper()
        return counter


updated:(DFS)
class Solution:
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        Note:
        """
        if grid is None or len(grid) == 0 or len(grid[0]) == 0:
            return 0
        num_island = 0
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c] == '1':
                    num_island += 1
                    self.dfs(grid, r, c)
        return num_island

    def dfs(self, grid, r, c):
        """
        :param grid:
        :param r:
        :param c:
        :return:

        """
        nr = len(grid)
        nc = len(grid[0])
        # Depth First Search
        # Flip current lands in grid to water to prevent their contributions to future island counting
        # Then DFS Top, Down, L
        grid[r][c] = '0' # flip the land to water
        if r > 0 and grid[r-1][c] == '1':
            self.dfs(grid, r-1, c)
        if r < nr - 1 and grid[r+1][c] == '1':
            self.dfs(grid, r+1, c)
        if c > 0 and grid[r][c-1] == '1':
            self.dfs(grid, r, c-1)
        if c < nc - 1 and grid[r][c+1] == '1':
            self.dfs(grid, r, c+1)