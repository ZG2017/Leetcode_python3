always apply k to the same num!


Backtracking: Time Limit Exceeded (4 / 1214)

class Solution:
    def backtracking(self, bit_holder, candidates, acc_gap, cur_k):
        if cur_k == self.k:
            if acc_gap > self.max_gap:
                self.max_gap = acc_gap
            return
        for idx, candidate in enumerate(candidates):
            cur_bit_holder, cur_gap, cur_candidate = self.update(bit_holder[:], candidate)
            cur_candidates = candidates[:]
            cur_candidates[idx] = cur_candidate
            self.backtracking(cur_bit_holder, cur_candidates, acc_gap+cur_gap, cur_k+1)

    def update(self, bit_holder, candidate):
        gap = 0
        for idx, bit in enumerate(candidate[::-1]):
            if bit == '1':
                bit_holder[idx] -= 1
                if bit_holder[idx] == 0:
                    gap -= 2**idx
                if idx+1 >= len(bit_holder):
                    bit_holder.append(0)
                    gap += 2**(idx+1)
                elif bit_holder[idx+1] == 0:
                    gap += 2**(idx+1)
                bit_holder[idx+1] += 1
        return bit_holder, gap, candidate +'0'

    def maximumOr(self, nums: List[int], k: int) -> int:
        binarys = [f'{i:b}' for i in nums]
        bit_holder = []
        for binary in binarys:
            for idx, bit in enumerate(binary[::-1]):
                if len(bit_holder) < idx+1:
                    bit_holder.append(0)
                if bit == '1':
                    bit_holder[idx] += 1
        biggest_len = len(bit_holder)
        candidates = [i for i in binarys if len(i) == biggest_len]
        self.max_gap = 0
        self.k = k
        self.backtracking(bit_holder, candidates, 0, 0)
        return sum([2**idx if c > 0 else 0 for idx, c in enumerate(bit_holder)])+self.max_gap


Backtracking with pruning: Time Limit Exceeded (1206 / 1214)

class Solution:
    def diff(self, bit_holder, og_candidate, k):
        new_candidate = og_candidate + '0'*k
        gap = 0
        for idx, bit in enumerate(og_candidate[::-1]):
            if bit == '1':
                bit_holder[idx] -= 1
                if bit_holder[idx] == 0:
                    gap -= 2**idx
        for idx, bit in enumerate(new_candidate[::-1]):
            if idx+1 > len(bit_holder):
                bit_holder.append(0)
            if bit == '1':
                bit_holder[idx] += 1
                if bit_holder[idx] == 1:
                    gap += 2**idx
        return gap

    def maximumOr(self, nums: List[int], k: int) -> int:
        binarys = [f'{i:b}' for i in nums]
        bit_holder = []
        for binary in binarys:
            for idx, bit in enumerate(binary[::-1]):
                if len(bit_holder) < idx+1:
                    bit_holder.append(0)
                if bit == '1':
                    bit_holder[idx] += 1
        biggest_len = len(bit_holder)
        candidates = [i for i in binarys if len(i) == biggest_len]
        max_gap = 0
        for candidate in candidates:
            acc_gap = 0
            this_bit_holder = bit_holder[:]
            cur_gap = self.diff(this_bit_holder, candidate, k)
            if cur_gap > max_gap:
                max_gap = cur_gap
        return sum([2**idx if c > 0 else 0 for idx, c in enumerate(bit_holder)]) + max_gap


prefix sum:
class Solution:
    def maximumOr(self, nums: List[int], k: int) -> int:
        n = len(nums)

        right = [0] * n
        for i in reversed(range(n - 1)):
            right[i] = right[i + 1] | nums[i + 1]

        left = [0] * n
        for i in range(1, n):
            left[i] = left[i - 1] | nums[i - 1]

        return max(
            l | (num << k) | r
            for l, num, r in zip(left, nums, right)
        )