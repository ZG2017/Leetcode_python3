mine:
class NumArray:

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.n = len(nums)
        if self.n == 0:
            return 
        self.nums = nums
        self.total = sum(nums)
        self.dp1 = [0 for _ in range(self.n)]
        self.dp2 = [0 for _ in range(self.n)]
        self.change = [0 for _ in range(self.n)]
        self.dp1[0] = nums[0]
        self.dp2[self.n-1] = nums[self.n-1]
        for i in range(1,self.n):
            self.dp1[i] = self.dp1[i-1]+nums[i]
        for i in reversed(range(self.n-1)):
            self.dp2[i] = self.dp2[i+1]+nums[i]

    def update(self, i, val):
        """
        :type i: int
        :type val: int
        :rtype: void
        """
        tmp = self.nums[i]-val
        self.nums[i] = val
        self.change[i] -= tmp

    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """
        if i == 0 and j == self.n-1:
            return self.total + sum(self.change[i:j+1])
        elif i == 0:
            return self.total - self.dp2[j+1] + sum(self.change[i:j+1])
        elif j == self.n-1:
            return self.total - self.dp1[i-1] + sum(self.change[i:j+1])
        else:
            return self.total - self.dp1[i-1] - self.dp2[j+1] + sum(self.change[i:j+1])
            
# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# obj.update(i,val)
# param_2 = obj.sumRange(i,j)



updated:  (binary index Tree)
class NumArray:

    def __init__(self, a):                      # 2:18-
        self.a = a
        self.tree = [0] + a
        self.n = len(self.tree)
        for i in range(1, self.n):
            kid = i + (i & -i)
            if kid < self.n:
                self.tree[kid] += self.tree[i]

    def update(self, i, val):
        delta = val - self.a[i]
        self.a[i] = val
        i += 1
        while i < self.n:
            self.tree[i] += delta
            i += i & -i
        

    def sumRange(self, i, j):
        def prefix_sum(i):
            ans = 0
            while i:
                ans += self.tree[i]
                i -= i & -i
            return ans
        return prefix_sum(j+1) - prefix_sum(i)