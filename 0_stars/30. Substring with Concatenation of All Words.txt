mine:
class Solution:
    def findSubstring(self, s, words):
        """
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        """
        result = []
        if len(s) == 0 or len(words) == 0:
            return result
        
        length = len(words[0])
        
        for i in range(length):
            tmp_s = s[i:]
            pointer_1,pointer_2 = 0,length
            dit = dict([(i,0) for i in words])
            while (len(tmp_s)-pointer_1)/length >= len(words):
                if tmp_s[pointer_2-length:pointer_2] in words:
                    dit[tmp_s[pointer_2-length:pointer_2]] += 1
                    for j in dit.keys():
                        if dit[j] > words.count(j):
                            dit[tmp_s[pointer_2-length:pointer_2]] -= 1
                            tmp = pointer_1
                            pointer_1 += length
                            while tmp_s[tmp:pointer_1] != j:
                                dit[tmp_s[tmp:pointer_1]] -= 1
                                tmp = pointer_1
                                pointer_1 += length
                            
                    if pointer_2 - pointer_1 == length*len(words):
                        dit[tmp_s[pointer_1:pointer_1+length]] -= 1
                        result.append(pointer_1+i)
                        pointer_1 += length
                    pointer_2 += length
                else:
                    pointer_1 = pointer_2
                    pointer_2 += length
                    dit = dict([(i,0) for i in words])
        return result
                    
                    