mine:(TLE)
class Solution:
    def maxNumber(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[int]
        """
        self.res = []
        self.find = False
        def helper(nums1,nums2,lens1,lens2,k):
            if k == 0:
                self.find = True
                return
            if lens1+lens2 < k:
                self.res.pop()
                return
            pointer1 = lens1
            pointer2 = lens2
            while not self.find:
                tmp_max1 = max(nums1[:pointer1]) if pointer1 != 0 else -1
                tmp_max2 = max(nums2[:pointer2]) if pointer2 != 0 else -1
                if tmp_max1 > tmp_max2:
                    self.res.append(tmp_max1)
                    tmp_index = nums1.index(tmp_max1)
                    helper(nums1[tmp_index+1:],nums2,lens1-tmp_index-1,lens2,k-1)
                    pointer1 = tmp_index
                elif tmp_max1 < tmp_max2:
                    self.res.append(tmp_max2)
                    tmp_index = nums2.index(tmp_max2)
                    helper(nums1,nums2[tmp_index+1:],lens1,lens2-tmp_index-1,k-1)
                    pointer2 = tmp_index
                else:
                    res_saver = self.res.copy()
                    tmp_find = False

                    self.res.append(tmp_max1)
                    tmp_index = nums1.index(tmp_max1)
                    helper(nums1[tmp_index+1:],nums2,lens1-tmp_index-1,lens2,k-1)
                    pointer1 = tmp_index
                    if self.find:
                        tmp_res = self.res.copy()
                        self.res = res_saver
                        tmp_find = True
                        self.find = False

                    self.res.append(tmp_max2)
                    tmp_index = nums2.index(tmp_max2)
                    helper(nums1,nums2[tmp_index+1:],lens1,lens2-tmp_index-1,k-1)
                    pointer2 = tmp_index
                    if self.find and tmp_find:
                        self.res = max(tmp_res,self.res)
                    elif not self.find and tmp_find:
                        self.res = tmp_res
                        self.find = True
            return
        helper(nums1,nums2,len(nums1),len(nums2),k)
        return self.res


updated:(longest subarray + merge)
class Solution(object):
    def maxNumber(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[int]
        """
        def getMax(nums, t):
            ans = []
            size = len(nums)
            for x in range(size):
                while ans and len(ans) + size - x > t and ans[-1] < nums[x]:
                    ans.pop()
                if len(ans) < t:
                    ans += nums[x],
            return ans

        def merge(nums1, nums2):
            ans = []
            while nums1 or nums2:
                if nums1 > nums2:
                    ans += nums1[0],
                    nums1 = nums1[1:]
                else:
                    ans += nums2[0],
                    nums2 = nums2[1:]
            return ans
        
        len1, len2 = len(nums1), len(nums2)
        res = []
        for x in range(max(0, k - len2), min(k, len1) + 1):
            tmp = merge(getMax(nums1, x), getMax(nums2, k - x))
            res = max(tmp, res)
        return res