class Solution:
    def __init__(self):
        self.res = []

    def build_prefix_tree(self, arr):
        self.prefix_tree = dict()
        curr = self.prefix_tree
        for i in arr:
            for char in i:
                if char not in curr:
                    curr[char] = dict()
                curr = curr[char]
            curr['HERE'] = dict()
            curr = self.prefix_tree

    def dfs(self, entrance_dict, curr_output):
        if len(entrance_dict) == 0:
            return 
        if 'HERE' in entrance_dict:
            self.res.append(curr_output)
        for char in entrance_dict:
            self.dfs(entrance_dict[char], curr_output+char)
    
    def extra_words(self, input_):
        curr = self.prefix_tree
        res = []
        for i in range(len(input_)):
            if input_[i] not in curr:
                res.append([])
                curr = dict()
            else:
                curr = curr[input_[i]]
                self.dfs(curr, input_[:i+1])
                sorted_res = sorted(self.res)
                res.append(copy.deepcopy(sorted_res[:3]))
                self.res = []
        return res

    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        self.build_prefix_tree(products)
        return self.extra_words(searchWord)
