从后往前动态规划：（超时）
class Solution:
    def new21Game(self, N: int, K: int, W: int) -> float:
        dp = [0.0] * (K + W)

        for i in range(K, min(N+1, K + W)):
            dp[i] = 1.0
        
        for i in range(K-1, -1, -1):
            tmp = 0
            for j in range(i+1, i + W + 1):
                tmp += dp[j]
            dp[i] = tmp/W
        
        return dp[0]

官方优化：将for循环简化为递推项
https://leetcode-cn.com/problems/new-21-game/solution/xin-21dian-by-leetcode-solution/
class Solution:
    def new21Game(self, N: int, K: int, W: int) -> float:
        if K == 0:
            return 1.0
        dp = [0.0] * (K + W)
        for i in range(K, min(N, K + W - 1) + 1):
            dp[i] = 1.0
        dp[K - 1] = float(min(N - K + 1, W)) / W
        for i in range(K - 2, -1, -1):
            dp[i] = dp[i + 1] - (dp[i + W + 1] - dp[i + 1]) / W
        return dp[0]


prob + dp + slide_window
class Solution:
    def new21Game(self, n: int, k: int, maxPts: int) -> float:
        if k == 0 or n > k+maxPts:
            return 1
        def find_comb(cur_num):
            for i in range(maxPts, 0, -1):
                if cur_num-i >= 0:
                    yield cur_num-i
        dp = [0]*(n+1)
        dp[0] = 1
        unit_p = 1/(maxPts)
        cur = 1
        cur_sum = dp[0]

        for i in range(1, n+1):
            dp[i] = cur_sum * unit_p
            if i < k:
                cur_sum += dp[i]
            if i - maxPts >= 0:
                cur_sum -= dp[i - maxPts]
        return sum(dp[k:n+1])
