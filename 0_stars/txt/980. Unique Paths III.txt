class Solution:

    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        self.grid = grid
        self.res = []
        self.start_pos = None
        self.c = 0
        self.output = 0
        self.m, self.n = len(self.grid), len(self.grid[0])
        self.init_walking()
        self.dfs(self.start_pos)
        return self.output

    def init_walking(self):
        res = None
        for i in range(self.m):
            for j in range(self.n):
                if self.grid[i][j] == 1:
                    self.start_pos = [i, j]
                if self.grid[i][j] == 0:
                    self.c += 1

    def check_next_step(self, cur_pos):
        x, y = cur_pos[0], cur_pos[1]
        res = []
        if 0 <= x-1 < self.m and (self.grid[x-1][y] == 0 or self.grid[x-1][y] == 2):
            res.append((-1, 0))
        if 0 <= x+1 < self.m and (self.grid[x+1][y] == 0 or self.grid[x+1][y] == 2):
            res.append((1, 0))
        if 0 <= y-1 < self.n and (self.grid[x][y-1] == 0 or self.grid[x][y-1] == 2):
            res.append((0, -1))
        if 0 <= y+1 < self.n and (self.grid[x][y+1] == 0 or self.grid[x][y+1] == 2):
            res.append((0, 1))
        return res

    
    def dfs(self, cur_pos):
        if self.grid[cur_pos[0]][cur_pos[1]] == 2 and len(self.res) == self.c+1:
            self.output += 1
            
            return
        valid_moves = self.check_next_step(cur_pos)
        for x, y in valid_moves:
            tmp = self.grid[cur_pos[0]][cur_pos[1]]
            self.grid[cur_pos[0]][cur_pos[1]] = -1
            self.res.append(cur_pos)
            self.dfs([cur_pos[0]+x, cur_pos[1]+y])
            self.grid[cur_pos[0]][cur_pos[1]] = tmp
            self.res.pop()
        
        
        

