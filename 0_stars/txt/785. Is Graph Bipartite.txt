class Solution:
    def helper(self, cur, cur_set):
        if cur in self.A_set or cur in self.B_set:
            if (cur in self.A_set and not cur_set) or (cur in self.B_set and cur_set):
                return False
            else:
                return True
        if cur_set:
            self.A_set.add(cur)
        else:
            self.B_set.add(cur)
        for i in self.holder[cur]:
            tmp = self.helper(i, not cur_set)
            if not tmp:
                return False
        return True            

    def isBipartite(self, graph: List[List[int]]) -> bool:
        self.A_set = set([])
        self.B_set = set([])
        self.holder = {i:graph[i] for i in range(len(graph))}
        if not self.holder:
            return True
        for i in range(len(self.holder)):
            if i in self.A_set or i in self.B_set:
                continue
            if not self.helper(i, True):
                return False
        return True
