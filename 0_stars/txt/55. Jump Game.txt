mine:
class Solution:
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        i = 0
        jump = 0
        
        if len(nums) == 1:
            return True
        for _ in range(len(nums) - 1):
            tmp_max = 0
            tmp = 0
            for j in range(1,nums[i]+1):
                if i+j ==  len(nums)-1:
                    jump += 1
                    return True
                if nums[i+j]+j > tmp_max:
                    tmp_max = nums[i+j]+j
                    tmp = j
            i += tmp
            jump += 1
        return False

updated:
class Solution:
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        n=len(nums)
        dp = [0]*n
        dp[-1]=1
        goodIndex = n-1
        
        n=len(nums)
        for k in reversed(range(n-1)):
            if k+nums[k]>=goodIndex:
                goodIndex=k
            # for j in range(k+1, min(n, k+nums[k]+1)):
            #     if dp[j]:
            #         dp[k]=1
            #         break 
        
        return goodIndex==0