mine: (Take too much time)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def insertionSortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return None
        sorted_list = ListNode(0)
        sorted_list.next = head
        pre = sorted_list
        sorted_head = sorted_list.next
        cur = head.next
        sorted_head.next = None
        while cur:
            while sorted_head != None and sorted_head.val <= cur.val:
                pre, sorted_head = sorted_head, sorted_head.next
            pre.next = cur
            tmp = cur.next
            cur.next = sorted_head
            cur = tmp
            sorted_head = sorted_list.next
            pre = sorted_list
        return sorted_list.next



updated:(just change the value)
class Solution:
    def insertionSortList(self, head):
        res = []
        copy = head
        while copy:
            res.append(copy.val)
            copy = copy.next
        '''for i in range(1,len(res)):
            for j in range(i,0,-1):
                if res[j-1] > res[j]:
                    temp = res[j-1]
                    res[j-1] = res[j]
                    res[j] = temp'''
        res = sorted(res)
        copy = head
        i = 0
        while copy:
            copy.val = res[i]
            i = i + 1
            copy = copy.next
        return head