mine: use 2 dicts
class Solution:
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        if not pattern and not str:
            return True
        elif not pattern or not str:
            return False
        strl = str.split(" ")
        if len(pattern) != len(strl):
            return False
        dit1 = {}
        dit2 = {}
        index = 0
        while index < len(strl):
            if pattern[index] not in dit1:
                dit1[pattern[index]] = strl[index]
            if dit1[pattern[index]] != strl[index]:
                return False
            if strl[index] not in dit2:
                dit2[strl[index]] = pattern[index]
            if dit2[strl[index]] != pattern[index]:
                return False
            index += 1
        return True


updated: use set instead of dict
class Solution:
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        listPattern = list(pattern)
        listStr = str.split(' ')
        if len(listPattern) != len(listStr):
            return False        
        setPattern = set()
        setTuple = set()
        setStr = set()
        for i in range(len(listPattern)):
            if listPattern[i] in setPattern or listStr[i] in setStr:
                if (listPattern[i], listStr[i]) not in setTuple:
                    return False
            else:
                setTuple.add((listPattern[i], listStr[i]))
                setPattern.add(listPattern[i])
                setStr.add(listStr[i])
                
        return True