mine:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        def helper(root):
            if not root:
                return None
            elif not root.left and not root.right:
                return root
            else:
                left = helper(root.left)
                right = helper(root.right)
                if not left:
                    return root
                else:
                    tmp = root.left
                    while tmp.right:
                        tmp = tmp.right
                    root.right,tmp.right,root.left = left,right,None
                    return root
        helper(root)



updated:(stack)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        if root == None:
            return
        s=[root]
        while s:
            node = s.pop()
            if node.right:
                s.append(node.right)
            if node.left:
                s.append(node.left)
            node.left = None
            if s:
                node.right = s[-1]
            else:
                node.right = None