mine:
class Solution:
    def generateMatrix(self, n):
        """
        :type n: int
        :rtype: List[List[int]]
        """
        matrix = [[0]*n for _ in range(n)] 
        tmp = [i for i in range(1,n**2+1)]
        wall_dit = {0:n-1, 1:n-1, 2:0, 3:1}
        # move_dit = {0:"going_right",1:"going_down",2:"going_left",3:"going_up"}
        move_pointer = 0
        ci_x = 0
        ci_y = 0
        
        for i in range(n**2):
            matrix[ci_x][ci_y] = tmp[i]
            if move_pointer == 0:
                if ci_y < wall_dit[move_pointer]:
                    ci_y += 1
                else:
                    ci_x += 1
                    wall_dit[move_pointer] -= 1
                    move_pointer = (move_pointer+1)%4
            elif move_pointer == 1:
                if ci_x < wall_dit[move_pointer]:
                    ci_x += 1
                else:
                    ci_y -= 1
                    wall_dit[move_pointer] -= 1
                    move_pointer = (move_pointer+1)%4
            elif move_pointer == 2:
                if ci_y > wall_dit[move_pointer]:
                    ci_y -= 1
                else:
                    ci_x -= 1
                    wall_dit[move_pointer] += 1
                    move_pointer = (move_pointer+1)%4
            elif move_pointer == 3:
                if ci_x > wall_dit[move_pointer]:
                    ci_x -= 1
                else:
                    ci_y += 1
                    wall_dit[move_pointer] += 1
                    move_pointer = (move_pointer+1)%4
        return matrix

updated:
class Solution:
    def generateMatrix(self, n):
        """
        :type n: int
        :rtype: List[List[int]]
        """
        ans = [[0]*n for _ in range(n)]
        i, j, di, dj = 0, 0, 0, 1
        for k in range(n*n):
            ans[i][j] = k+1
            # when encounter first element
            if ans[(i+di)%n][(j+dj)%n]:
                di, dj = dj, -di
            i += di
            j += dj
        return ans