backtracking

class Solution:
    def canBeIncreasing(self, nums: List[int]) -> bool:
        def backtracking(arr, cur_remove):
            if cur_remove > 1:
                return False
            if len(arr) == 2:
                if arr[0]<=arr[1]:
                    return True
                else:
                    return False
            for i in range(1, len(arr)-1):
                if arr[i-1]<arr[i]<arr[i+1]:
                    continue
                if arr[i-1]==arr[i]==arr[i]==arr[i+1] or arr[i-1]>arr[i]>arr[i+1]:
                    return False
                elif arr[i]>=arr[i-1] and arr[i]>=arr[i+1]:
                    if arr[i+1]>arr[i-1]:
                        return backtracking([arr[i-1]]+arr[i+1:], cur_remove+1) or backtracking(arr[i-1:i+1]+arr[i+2:], cur_remove+1)
                    elif arr[i-1]>=arr[i+1]:
                        return backtracking(arr[i-1:i+1]+arr[i+2:], cur_remove+1)
                elif arr[i]<=arr[i-1] and arr[i]<=arr[i+1]:
                    if arr[i+1]>arr[i-1]:
                        return backtracking(arr[i:], cur_remove+1) or backtracking([arr[i-1]]+arr[i+1:], cur_remove+1)
                    elif arr[i-1]>=arr[i+1]:
                        return backtracking(arr[i:], cur_remove+1)
            return True
        
        if len(nums) <= 2:
            return True
        return backtracking(nums, 0)
                
            
        