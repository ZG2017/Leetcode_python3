recursive with cache

class Solution:
    @cache
    def helper(self, cur_idx, m):
        if cur_idx >= self.l:
            return 0
        cur_max = 0
        if cur_idx+2*m >= self.l:
            return self.pre_sum[-1] - self.pre_sum[cur_idx]
        for i in range(cur_idx+1, min(cur_idx+m*2, self.l)+1):
            cur_res = self.pre_sum[i] - self.pre_sum[cur_idx]
            future_res = self.pre_sum[-1] - self.pre_sum[i] - self.helper(i, max((i-cur_idx), m))
            if cur_res + future_res > cur_max:
                cur_max = cur_res + future_res
        return cur_max

    def stoneGameII(self, piles: List[int]) -> int:
        if not piles:
            return 0
        cur_sum = 0
        self.pre_sum = [cur_sum]
        for i in piles:
            cur_sum += i
            self.pre_sum.append(cur_sum)
        self.l = len(piles)
        return self.helper(0, 1)


update: DP:
refer: https://leetcode.com/problems/stone-game-ii/solutions/5662713/98-55-easy-solution-with-explanation/

class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        n = len(piles)

        dp = [[0] * (n + 1) for _ in range(n)]
        suffix_sum = [0] * n
        suffix_sum[-1] = piles[-1]

        for i in range(n - 2, -1, -1):
            suffix_sum[i] = suffix_sum[i + 1] + piles[i]

        for i in range(n - 1, -1, -1):
            for m in range(1, n + 1):
                if i + 2 * m >= n:
                    dp[i][m] = suffix_sum[i]
                else:
                    for x in range(1, 2 * m + 1):
                        dp[i][m] = max(dp[i][m], suffix_sum[i] - dp[i + x][max(m, x)])

        return dp[0][1]

