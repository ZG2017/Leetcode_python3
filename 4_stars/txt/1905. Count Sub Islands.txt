union find

TLE

class Solution:
    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        n,m = len(grid1), len(grid1[0])
        dirs = [(1, 0), (0, 1)]
        def check(x, y):
            if x < n and x >= 0 and y < m and y >= 0:
                return True
            else:
                return False

        def union(x, y, holder):
            root_x = find(x, holder)
            root_y = find(y, holder)
            holder[root_x] = root_y

        def find(x, holder):
            if holder[x] == x:
                return x
            else:
                return find(holder[x], holder)

        # visited = [[False]*len(m) for i in range(n)]
        holder1 = [i for i in range(n*m)]
        for x in range(n):
            for y in range(m):
                if grid1[x][y] == 1: # and not visited[x][y]
                    for delta_x, delta_y in dirs:
                        if check(x+delta_x, y+delta_y) and grid1[x+delta_x][y+delta_y] == 1:
                            union(x*m+y, m*(x+delta_x)+y+delta_y, holder1)
                            # visited[x][y] = True
                    # visited[x][y] = True
        holder_1_dict = dict()
        for x in range(n):
            for y in range(m):
                if grid1[x][y] == 1:
                    i = x*m+y
                    cur_i = find(i, holder1)
                    if find(i, holder1) not in holder_1_dict:
                        holder_1_dict[cur_i] = []
                    holder_1_dict[cur_i].append(i)


        holder2 = [i for i in range(n*m)]
        for x in range(n):
            for y in range(m):
                if grid2[x][y] == 1: # and not visited[x][y]
                    for delta_x, delta_y in dirs:
                        if check(x+delta_x, y+delta_y) and grid2[x+delta_x][y+delta_y] == 1:
                            union(x*m+y, m*(x+delta_x)+y+delta_y, holder2)

        holder_2_dict = dict()
        for x in range(n):
            for y in range(m):
                if grid2[x][y] == 1:
                    i = x*m+y
                    cur_i = find(i, holder2)
                    if find(i, holder2) not in holder_2_dict:
                        holder_2_dict[cur_i] = []
                    holder_2_dict[cur_i].append(i)

        # print(holder_1_dict)
        # print(holder_2_dict)

        res = 0
        for root2 in holder_2_dict:
            root1 = find(root2, holder1)
            if root1 in holder_1_dict:
                cur_set = holder_1_dict.get(root1, None)
                if not cur_set:
                    continue
                flag = False
                for i in holder_2_dict[root2]:
                    if i not in cur_set:
                        flag = True
                        break
                if not flag:
                    res += 1

        return res


updated: union find with Path compression in find()

refer: https://leetcode.com/problems/count-sub-islands/solutions/5695643/o-m-n-union-find-java-c-python-go-rust-javascript/

class Solution:
    def union(self, x: int, y: int):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            self.holder[root_x] = root_y

    def find(self, x: int):
        if self.holder[x] != x:
            self.holder[x] = self.find(self.holder[x])
        return self.holder[x]

    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        n,m = len(grid1), len(grid1[0])

        self.holder = [i for i in range(n*m)]
        for x in range(n):
            for y in range(m):
                if grid2[x][y] == 1:
                    cur_i = x*m+y
                    if y + 1 < m and grid2[x][y+1] == 1:
                        self.union(cur_i, cur_i+1)
                    if x + 1 < n and grid2[x+1][y] == 1:
                        self.union(cur_i, cur_i+m)

        status = [0 for i in range(n*m)]
        for x in range(n):
            for y in range(m):
                if grid1[x][y] == 0 and grid2[x][y] == 1:
                    status[self.find(m*x+y)] = 2
        res = 0
        for x in range(n):
            for y in range(m):
                if grid2[x][y] == 1:
                    cur_root = self.find(m*x+y)
                    if status[cur_root] == 0:
                        res += 1
                        status[cur_root] = 1
        return res


