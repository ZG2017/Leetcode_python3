first, find the target node
second, walk through to find required nodes


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def get_target(self, root, cur_path, pre_dir, cur_dis):
        if not root:
            return
        if root.val == self.target:
            self.path = cur_path+pre_dir
            self.dis = cur_dis
            return
        self.get_target(root.left, cur_path+pre_dir, 'L', cur_dis+1)
        self.get_target(root.right, cur_path+pre_dir, 'R', cur_dis+1)


    def get_answer(self, root, dis, path):
        if not root:
            return
        if path == '':
            if self.k == dis:
                self.ans.append(root.val)
            self.get_answer(root.left, dis+1, path)
            self.get_answer(root.right, dis+1, path)
            return
        if self.k == dis:
            self.ans.append(root.val)
        if path is None:
            if dis+1 <= self.k:
                self.get_answer(root.right, dis+1, None)
                self.get_answer(root.left, dis+1, None)
            return
        cur_direction = path[0]
        if cur_direction =='L':
            self.get_answer(root.left, dis-1, path[1:])
            if dis+1 <= self.k:
                self.get_answer(root.right, dis+1, None)
        else:
            self.get_answer(root.right, dis-1, path[1:])
            if dis+1 <= self.k:
                self.get_answer(root.left, dis+1, None)
        return

    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        if not root:
            return []
        self.dis = 0
        self.path = ''
        self.k = k
        self.target = target.val
        self.get_target(root, '', '', 0)
        self.ans = []
        self.get_answer(root, self.dis, self.path)
        return self.ans