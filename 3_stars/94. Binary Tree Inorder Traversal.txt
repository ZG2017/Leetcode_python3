mine: (stack)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if root == None:
            return []
        res = []
        current = root
        stack = [-1,root]
        while current != -1:
            if current.left != None:
                stack.append(current.left)
                current.left = None
                current = stack[-1]
            elif current.left == None and current.right != None:
                res.append(current.val)
                stack.pop()
                stack.append(current.right)
                current = stack[-1]
            elif current.left == None and current.right == None:
                res.append(current.val)
                stack.pop()
                current = stack[-1]
        return res

mine: (change the order of lines, it can be modify to pre-order/post-order traversal)
class Solution:
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        def recursion(node):
            if node == None:
                return 
            recurion(node.left)
            res.append(node.val)
            recurion(node.right)
        recurion(root)
        return res
