updated: (dp backward is much easier)
class Solution:
    def calculateMinimumHP(self, dungeon):
        """
        :type dungeon: List[List[int]]
        :rtype: int
        """
        if not dungeon:
            return 1
        m = len(dungeon)
        n = len(dungeon[0])
        for i in range(len(dungeon)):
            dungeon[i] = dungeon[i][::-1]
        dungeon = dungeon[::-1]
        dp = [[0 for _ in range(n)] for _ in range(m)]
        dp[0][0] = (1-dungeon[0][0]) if dungeon[0][0] < 0 else 1
        for i in range(1,n):
            dp[0][i] = max(dp[0][i-1]-dungeon[0][i],1)
        for i in range(1,m):
            dp[i][0] = max(dp[i-1][0]-dungeon[i][0],1)
            
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = max(min(dp[i-1][j]-dungeon[i][j],dp[i][j-1]-dungeon[i][j]),1)
        return dp[-1][-1]