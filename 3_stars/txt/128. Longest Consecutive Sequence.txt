mine:(union_find, take too much time)
class Solution:
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_length = [0]
        tmp_length = 1
        while nums:
            number = nums.pop()
            tmp = number+1
            while tmp in nums:
                nums.pop(nums.index(tmp))
                tmp += 1
                tmp_length += 1
            tmp = number-1
            while tmp in nums:
                nums.pop(nums.index(tmp))
                tmp -= 1
                tmp_length += 1
            max_length.append(tmp_length)
            tmp_length = 1
        return max(max_length)


updated:(union_fin, much faster, only search on side)
class Solution:
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = set(nums)
        best = 0
        for x in nums:
            if x + 1 not in nums:
                y = x - 1
                while y in nums:
                    y -= 1
                best = max(best, x - y)
        return best