bfs + pruning

class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        holder = dict()
        for s, d, p in flights:
            if s not in holder:
                holder[s] = dict()
            holder[s][d] = p

        cur_min = float('inf')
        is_min = False
        visited = dict()
        from collections import deque
        q = deque()
        q.append((src, 0, 0))
        for layer in range(k+1):
            while q and q[0][1] == layer:
                cur_node, _, cur_price = q.popleft()
                if cur_node not in holder:
                    continue
                cur_candidates = holder[cur_node].keys()
                for node in cur_candidates:
                    accumulate_price = cur_price + holder[cur_node][node]
                    if accumulate_price > cur_min:
                        continue
                    if node in visited:
                        if accumulate_price < visited[node]:
                            q.append((node, layer+1, accumulate_price))
                        else:
                            continue
                    else:

                        if node == dst:
                            if accumulate_price < cur_min:
                                is_min = True
                                cur_min = accumulate_price
                        else:
                            visited[node] = accumulate_price
                            q.append((node, layer+1, accumulate_price))
        if is_min:
            return cur_min
        else:
            return -1