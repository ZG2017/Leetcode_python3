mine: TLE
class Solution:
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        board = [["." for _ in range(n)] for _ in range(n)]
        res = []
        q = []
        
        def check(from_where,queens):
            for i in range(from_where,n**2+1):
                if i == n**2:
                    if len(queens) == n:
                        res.append(["".join(item) for item in board])
                    elif queens != []:
                        board[queens[-1]//n][queens[-1]%n] = "."
                    return
                ir = i//n
                ic = i%n
                board[ir][ic] = "Q"
                flag = True
                if flag:
                    for j in range(ir):
                        if flag and board[j][ic] == "Q": 
                            board[ir][ic] = "."
                            flag = False
                if flag:
                    for j in range(ic):
                        if flag and board[ir][j] == "Q": 
                            board[ir][ic] = "."
                            flag = False
                if flag:
                    for j in range(1,min(ir+1,ic+1)):
                        if flag and board[ir-j][ic-j] == "Q":
                            board[ir][ic] = "."
                            flag = False
                if flag:
                    for j in range(1,min(ir+1,n-ic)):
                        if flag and board[ir-j][ic+j] == "Q":
                            board[ir][ic] = "."
                            flag = False

                if flag:
                    if i//n == n-1:
                        check(i+1,queens + [ir*n+ic])
                    else:
                        check(((i//n)+1)*n, queens + [ir*n+ic])
                else:
                    continue
        check(0,q)
        return res

updated:
class Solution(object):
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        self.col = [False] * n
        self.diag = [False] * (2 * n)
        self.anti_diag = [False] * (2 * n)
        self.result = []
        self.recursive(0, n, [])
        return self.result

    def recursive(self, row, n, column):
        if row == n:
            self.result.append(list(map(lambda x: '.' * x + 'Q' + '.' * (n - 1 - x), column)))
        else:
            for i in range(n):
                if not self.col[i] and not self.diag[row + i] and not self.anti_diag[n - i + row]:
                    self.col[i] = self.diag[row + i] = self.anti_diag[n - i + row] = True
                    self.recursive(row + 1, n, column + [i])
                    self.col[i] = self.diag[row + i] = self.anti_diag[n - i + row] = False

