# 递归
class Solution:
    def idx_check(self, x, y):
        if x >= 0 and x < self.len_col and y >= 0 and y < self.len_row:
            return True
        else:
            return False
    
    def get_next(self, x, y):
        return (x-1, y), (x+1, y), (x, y-1), (x, y+1)

    def helper(self, x, y, cur_word):
        if not cur_word:
            return True
        for new_x, new_y in self.get_next(x,y):
            if self.idx_check(new_x, new_y) and (not self.visited[new_x][new_y]) and self.board[new_x][new_y] == cur_word[0]:
                self.visited[new_x][new_y] = True
                res = self.helper(new_x, new_y, cur_word[1:])
                self.visited[new_x][new_y] = False
                if res:
                    return True
        return False

    def exist(self, board: List[List[str]], word: str) -> bool:
        if not board:
            return False
        self.len_row = len(board[0])
        self.len_col = len(board)
        self.board = board
        self.visited = [[False for i in range(self.len_row)] for j in range(self.len_col)]
        for i in range(self.len_col):
            for j in range(self.len_row):
                if board[i][j] == word[0]:
                    self.visited[i][j] = True
                    res = self.helper(i, j, word[1:])
                    self.visited[i][j] = False
                    if res:
                        return True
        return False



